% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid.R
\name{gridConstruct}
\alias{gridConstruct}
\alias{gridFilter}
\alias{gridLocate}
\alias{gridFactor}
\title{Construct a grid based on observation locations.}
\usage{
gridConstruct(data, type = c("squareGrid", "triangularGrid", "scatterGrid",
  "lonlatGrid"), filter = TRUE, wet = !wetEdges, wetEdges = FALSE,
  connected = TRUE, ordertol = 1, ...)

gridFilter(grid, data, icesSquare = FALSE, nearestObs = Inf, wet = FALSE,
  connected = FALSE, ordertol = 0, wetEdges = FALSE, ...)

gridLocate(grid, points)

gridFactor(data, grid, ...)
}
\arguments{
\item{data}{data.frame.}

\item{type}{Neighborhood structure type.}

\item{filter}{Call \code{gridFilter} after grid construction?}

\item{wet}{Remove grid points on land.}

\item{wetEdges}{Alternative: Keep edges passing through water.}

\item{connected}{Keep only largest connected component.}

\item{ordertol}{Require at least \code{ordertol} neighbors to every grid point.}

\item{grid}{}

\item{icesSquare}{Remove grid points outside ICES squares in the data?}

\item{nearestObs}{Remove grid points with closest data point greater than \code{nearestObs}.}

\item{points}{}

\item{center}{Optional list to control origo of grid.}

\item{km}{Optional distance between neighboring grid points in km.}
}
\value{
grid object

Filtered grid object
}
\description{
\code{gridConstruct} constructs a grid.

\code{gridFilter} filters off unwanted grid points.

\code{gridLocate} finds the closest grid point for a set of locations.

\code{gridFactor} constructs a gridFactor object.
}
\details{
Construction of grids generally involves three steps:
\enumerate{
\item \code{gridConstruct} - Construct the grid sufficiently fine and
sufficiently large to contain all data points.
\item \code{gridFilter} - Filter off unwanted grid points. For instance
grid points on land or grid points too far away from the region of
interest.
\item \code{gridLocate} - For each data point locate the nearest grid
point.
}

\code{gridLocate} performs a brute force search of closest gridpoint
to each data point. The index of the closest grid point is returned.
}
\examples{
## Construct grid of North Sea and lookup points in the grid.

## Data
df <- data.frame(lon=c(0 ,1 ,5 ,6 ,2 ,2, 5, 1),
                 lat=c(56,60,55,57,54,58,55,60))

## Construct grid
gr <- gridConstruct(df,km=100,scale=1.3,filter=!FALSE)
plot(gr);points(df);map("worldHires",add=TRUE)
insq <- initialSquare(df)
insq$lon <- insq$lon + center$lon
insq$lat <- insq$lat + center$lat
points(insq, pch = "+", col = 2, lwd = 3)

## grid factor
gf <- gridFactor(df,gr)
points(gr[gf,],col="red")

## Max distance to nearest grid point
max(dist.km(df,gr[gf,],outer=FALSE))

## 2.
gr <- gridConstruct(df,km=30,nearestObs=100,connected=FALSE)
plot(gr);points(df);map("worldHires",add=TRUE)


## 3.
gr <- gridConstruct(df, "lonlatGrid", lonstep = 0.1, latstep = 0.1)
plot(gr, xlim = c(-5, 10), ylim = c(50, 65));points(df);map("worldHires",add=TRUE)
center <- data.frame(lon=mean(range(df$lon)), lat=mean(range(df$lat)))
insq <- initialSquare(df)
insq$lon <- insq$lon + center$lon
insq$lat <- insq$lat + center$lat
points(insq, pch = "+", col = 2, lwd = 3)
gf <- gridFactor(df,gr)
points(gr[gf,],col="red")

## Max distance to nearest grid point
max(dist.km(df,gr[gf,],outer=FALSE))

}
